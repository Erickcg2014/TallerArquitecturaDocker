version: "3.8"

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: postgres_productos
    restart: unless-stopped
    env_file: 
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./data.sql:/docker-entrypoint-initdb.d/02-data.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Spring Boot
  backend:
    build: 
      context: ./demo
      dockerfile: Dockerfile
    container_name: spring_productos_app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_OPEN_IN_VIEW: "false"
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - app-network
    env_file:
      - .env

  # Frontend (Cliente Liviano)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: productos_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - app-network


volumes:
  pgdata:

networks:
  app-network:
    driver: bridge